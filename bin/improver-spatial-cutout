#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to cutout the desired domain."""

from distutils.spawn import find_executable
import glob
import os
import subprocess


from improver.argparser import ArgParser
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf
from improver.utilities.spatial import (
    generate_indices_for_cutout, domain_cutout_with_indices,
    domain_cutout_with_values, find_if_any_coordinate_is_circular,
    range_with_endpoint)


def main():
    """Load in arguments, use ncks to make a cutout and save."""

    parser = ArgParser(
        description='Compute a spatial cutout from an input cube. '
                    'The cutout will be computed by specifying the coordinate '
                    'that will be used to create the cutout and the ')
    parser.add_argument('input_filepath', metavar='INPUT_FILE',
                        help='A path to an input NetCDF file to be processed.'
                             'This could be a wildcarded filepath.')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--output_filepath', metavar='OUTPUT_FILES',
                       help='The output filepath for the processed NetCDF.'
                            'If this option is selected, then the assumption '
                            'is that number of input filepaths will match '
                            'the number of output filepaths.'
                            'This option would therefore support converting '
                            'a single file to an output file with a '
                            'different name.')
    group.add_argument('--output_directory', metavar='OUTPUT_DIRECTORY',
                       help='The output directory for the processed NetCDF.'
                            'If this option is selected, then the assumption '
                            'is that the output filename will be the same '
                            'as the input filename.')
    parser.add_argument('y_coord_name', metavar='Y_COORD_NAME',
                        help='The name of the y coordinate.')
    parser.add_argument('x_coord_name', metavar='X_COORD_NAME',
                        help='The name of the x coordinate.')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--use_indices', action='store_true',
                       help='Specify whether the input values for the '
                            'coordinates are indices or values.')
    group.add_argument('--use_values', action='store_true',
                       help='Specify whether the input values for the '
                            'coordinates are indices or values.')
    parser.add_argument('--x_coord',
                        metavar=('FIRST_LIMIT', 'SECOND_LIMIT'),
                        nargs=2,
                        help='A pair of limits to represent either the '
                             'range for the indices that will be extracted '
                             'e.g. 1 3 to extract from the first index to '
                             'the third index '
                             'or the data values that will be used as the '
                             'limits e.g. 10 30 where these limits could '
                             'refer to degrees of longitude.')
    parser.add_argument('--y_coord',
                        metavar=('FIRST_LIMIT', 'SECOND_LIMIT'),
                        nargs=2,
                        help='A pair of limits to represent either the '
                             'range for the indices that will be extracted '
                             'e.g. 1 3 to extract from the first index to '
                             'the third index '
                             'or the data values that will be used as the '
                             'limits e.g. 10 30 where these limits could '
                             'refer to degrees of latitude.')
    parser.add_argument('--different_domains', action='store_true',
                        help='If this argument is specified, then the '
                             'y and x extent of the spatial cutout will be '
                             'recalculated for each file, otherwise it will '
                             'be assumed that the input files contain the '
                             'same domain.')
    parser.add_argument('--force_conversion_to_indices', action='store_true',
                        help='Force the spatial cutout to be constructed '
                             'in terms of indices, even when values are '
                             'supplied.')
    parser.add_argument('--force_overwrite', action='store_true',
                        help='Force the overwriting of output files if '
                             'the files already exist. This could be useful '
                             'when cutouts have already been created for a '
                             'subset of a large number of files.')
    parser.add_argument('--ncks_options',
                        help='The list of options for passing to the ncks '
                             'utility. This should be supplied as a string '
                             'of options e.g. "Oh" with no additional hyphens '
                             'or spaces.')
    args = parser.parse_args()

    if args.use_values and args.ncks_options:
        explanation = ("the ncks utility uses indices to create the spatial "
                       "cutout, rather than using the values along the "
                       "selected coordinates.")
        parser.incompatible_options("use_values", "ncks_options", explanation)

    input_files = glob.glob(args.input_filepath)

    if args.output_filepath:
        if len(input_files) == len([args.output_filepath]):
            output_files = [args.output_filepath]
        else:
            msg = ("If the output_filepath argument is provided, then the "
                   "number of input files must match the number of output "
                   "files.")
            raise ValueError(msg)
    elif args.output_directory:
        output_files = []
        for input_file in sorted(input_files):
            basename = os.path.basename(input_file)
            output_files.append(os.path.join(args.output_directory, basename))

    if args.use_indices:
        if args.x_coord or args.y_coord:
            if args.x_coord:
                x_coord = args.x_coord
            else:
                x_coord = (0, -1)
            if args.y_coord:
                y_coord = args.y_coord
            else:
                y_coord = (0, -1)
        else:
            msg = ("If indices are to be used to create the cutout, then "
                   "either x coordinate indices, y coordinate indices or "
                   "both must be specified.")
            raise ValueError(msg)

    if args.use_values:
        if args.x_coord or args.y_coord:
            if args.x_coord:
                x_coord = args.x_coord
            else:
                x_coord = None
            if args.y_coord:
                y_coord = args.y_coord
            else:
                y_coord = None
        else:
            msg = ("If values are to be used to create the cutout, then "
                   "either x coordinate values, y coordinate values or "
                   "both must be specified.")
            raise ValueError(msg)

    determine_extent = True
    for input_file, output_file in zip(input_files, output_files):
        if find_executable("ncks") and args.use_indices:
            y_constr = "{},{},{}".format(args.y_coord_name, y_coord[0],
                                         y_coord[1])
            x_constr = "{},{},{}".format(args.x_coord_name, x_coord[0],
                                         x_coord[1])
            ncks_options = "-{}".format(args.ncks_options)
            if os.path.isfile(output_file) and "O" not in ncks_options:
                print "The file: {} exists. Moving on...".format(output_file)
            else:
                try:
                    subprocess.check_call(
                        ["ncks", ncks_options, "-d", y_constr, "-d", x_constr,
                         input_file, output_file])
                except subprocess.CalledProcessError as err:
                    msg = ("Error when creating spatial cutout using ncks. "
                           "Error reported is {}".format(err))
                    raise ValueError(msg)
        else:
            if os.path.isfile(output_file) and not args.force_overwrite:
                print "The file: {} exists. Moving on...".format(output_file)
            else:
                cube = load_cube(input_file)
                if args.use_indices or args.force_conversion_to_indices:
                    if determine_extent or args.different_domains:
                        y_extent, x_extent = (
                            generate_indices_for_cutout(
                                cube, y_coord, x_coord, args.use_indices))
                    determine_extent = False
                    cube = domain_cutout_with_indices(
                        cube, y_extent=y_extent, x_extent=x_extent)
                elif args.use_values:
                    cube = domain_cutout_with_values(cube, y_coord, x_coord)
                else:
                    msg = ("The spatial cutout uses either indices or values, "
                           "in order to create the spatial cutout. "
                           "Please specify whether you would like the spatial "
                           "cutout to be done in terms of indices or values.")
                    raise ValueError(msg)
                save_netcdf(cube, output_file)


if __name__ == "__main__":
    main()
