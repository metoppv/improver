#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to regrid a source grid to a target grid."""

import iris

from improver.argparser import ArgParser
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf
from improver.utilities.cube_metadata import amend_metadata, delete_attributes


def main():
    """Regrid data from a source cube on to a target grid described by another
       cube."""

    cli_specific_arguments = [(['source_data_filepath'],
                               {'metavar': 'SOURCE_DATA',
                                'help': ('A cube of data that is to be '
                                         'regridded onto the target_grid.')}),
                              (['target_grid_filepath'],
                               {'metavar': 'TARGET_GRID',
                                'help': ('A cube containing the grid to which '
                                         'the source_data is to be regridded.'
                                         )}),
                              (['output_filepath'],
                               {'metavar': 'OUTPUT_FILE',
                                'help': ('The output path for the processed '
                                         'NetCDF')}),
                              (['--nearest'],
                               {'default': False,
                                'action': 'store_true',
                                'help': ('If True, regridding will be '
                                         'performed using iris.analysis.'
                                         'Nearest() instead of Linear(). '
                                         'Use for less continuous fields, e.g.'
                                         ' precipitation.')}),
                              (['--extrapolation_mode'],
                               {'default': 'nanmask',
                                'help': ('Mode to use for extrapolating data '
                                         'into regions beyond the limits of '
                                         'the source_data domain. Modes are: '
                                         'extrapolate - The extrapolation '
                                         'points will take their value from '
                                         'the nearest source point. '
                                         'nan - The extrapolation points will '
                                         'be be set to NaN. error - A '
                                         'ValueError exception will be raised,'
                                         ' notifying an attempt to extrapolate'
                                         '. mask  - The extrapolation points '
                                         'will always be masked, even if the '
                                         'source data is not a MaskedArray. '
                                         'nanmask - If the source data is a '
                                         'MaskedArray the extrapolation points'
                                         ' will be masked. Otherwise they will'
                                         ' be set to NaN. Defaults to nanmask.'
                                         )}),
                              ]

    cli_definition = {'central_arguments': [],
                      'specific_arguments': cli_specific_arguments,
                      'description': ('Regrid data from source_data on to the '
                                      'grid contained within target_grid using'
                                      ' iris.analysis.Linear() or optionally '
                                      'iris.analysis.Nearest()')}

    args = ArgParser(**cli_definition).parse_args()

    source_data = load_cube(args.source_data_filepath)
    target_grid = load_cube(args.target_grid_filepath)

    regridder = iris.analysis.Linear(
        extrapolation_mode=args.extrapolation_mode)
    if args.nearest:
        regridder = iris.analysis.Nearest(
            extrapolation_mode=args.extrapolation_mode)

    source_on_target = source_data.regrid(target_grid, regridder)
    target_grid_attributes = {k: v for (k, v) in target_grid.attributes.items()
                              if 'mosg__grid' in k}
    amend_metadata(source_on_target, revised_attributes=target_grid_attributes)
    delete_attributes(source_on_target, ['title'])
    save_netcdf(source_on_target, args.output_filepath)


if __name__ == "__main__":
    main()
