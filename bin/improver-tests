#!/bin/bash
#------------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
#------------------------------------------------------------------------------
# NAME
#    improver tests - Run IMPROVER self-tests
#
# SYNOPSIS
#    improver tests
#
# DESCRIPTION
#    Launch all IMPROVER self-tests.
#------------------------------------------------------------------------------

set -eu

function echo_ok {
    echo -e "\033[1;32m[OK]\033[0m $1"
}

function get_python_files {
    FILES_TO_TEST=`find $IMPROVER_DIR -type f \( -name '*.py' \
                                              -o -name 'improver-*' \
                                               ! -name 'improver-tests' \
                                               ! -name '*~' \)`
}

function improver_test_pycodestyle {
    # Pycodestyle testing.
    ${PYCODESTYLE:-pycodestyle} $FILES_TO_TEST
    echo_ok "pycodestyle"
}

function improver_test_pylint {
    # Pylint score generation.
    ${PYLINT:-pylint} --rcfile=../etc/pylintrc $FILES_TO_TEST
}

function improver_test_pylintE {
    # Pylint obvious-errors-only testing.
    ${PYLINT:-pylint} -E --rcfile=../etc/pylintrc $FILES_TO_TEST
    echo_ok "pylint -E"
}

function improver_test_doc {
    # Build documentation as test.
    cd $IMPROVER_DIR/doc
    make html 1>/dev/null
    echo_ok "sphinx-build -b html"
    cd -
}

function improver_test_unit {
    # Unit tests.
    if [[ -n $DEBUG_OPT ]]; then
        VERBOSE_OPT='-v'
    fi
    if type -f coverage 1>/dev/null 2>&1; then
        coverage run -m unittest discover ${VERBOSE_OPT:-}
        coverage xml
        if [[ -n "${CODACY_PROJECT_TOKEN:-}" ]]; then
            # Report coverage to Codacy if possible.
            python-codacy-coverage -r coverage.xml
        fi
    else
        python -m unittest discover ${VERBOSE_OPT:-}
    fi
    echo_ok "Unit tests"
}

function improver_test_cli {
    # CLI testing.
    PATH="$IMPROVER_DIR/tests/bin/:$PATH"

    if [[ -n ${RECREATE_BATS_KGO:-} ]]; then
        echo -e "\nSet to recreate KGO at path $RECREATE_BATS_KGO"
        echo -e "To unset this use: unset RECREATE_BATS_KGO \n\n"
        read -p "Press enter to continue"
    fi

    for SUBTEST in $CLISUBTEST; do
        test_dir=$IMPROVER_DIR/tests/improver-$SUBTEST/
        test_dir="$(echo -e "${test_dir}" | tr -d '[:space:]')"
        if [[ -z $BATS_OPT ]] && type prove &>/dev/null; then
            PROVE_VERBOSE_OPT=
            if [[ -n $DEBUG_OPT ]]; then
                PROVE_VERBOSE_OPT='-v'
            fi
            prove $PROVE_VERBOSE_OPT --directives -r \
                -e "bats --tap" --ext ".bats" --timer $test_dir
        else
            bats $(find $test_dir -name "*.bats")
        fi
    done
    echo_ok "CLI tests"
}

function print_usage {
    # Output CLI usage information.
    cat <<'__USAGE__'
improver tests [OPTIONS] [SUBTEST...]

Run pycodestyle, pylint, documentation, unit and CLI acceptance tests.

Optional arguments:
    --bats          Run CLI tests using BATS instead of the default prove
    --debug         Run in verbose mode (may take longer for CLI)
    -h, --help      Show this message and exit

Arguments:
    SUBTEST         Name(s) of a subtest to run without running the rest.
                    Valid names are: pycodestyle, pylint, pylintE, doc, unit, cli.
                    pycodestyle, pylintE, doc, unit, and cli are the default tests.
    SUBCLI          Name(s) of cli subtests to run without running the rest.
                    Valid names are tasks which appear in /improver/tests/
                    without the "improver-" prefix. The default is to run all
                    cli tests in the /improver/tests/ directory.
                    e.g. 'improver tests cli nbhood' will run neighbourhood
                    processing cli tests only.
__USAGE__
}

cd $IMPROVER_DIR/lib
#cd $IMPROVER_DIR

# Find cli test options and format to work with case statement
shopt -s extglob
opts=../tests/*
cli_tasks=('+(')
for i in $opts; do
  fname=${i##*/}
  if [[ "$fname" != "bin" ]] && [[ "$fname" != "lib" ]]; then
    cli_tasks+="${fname##*improver-}|"
  fi
done
cli_tasks+=')'

BATS_OPT=
DEBUG_OPT=
SUBTESTS=
SUBCLI=
for arg in "$@"; do
    case $arg in
        --bats)
        BATS_OPT='--bats'
        ;;
        --debug)
        DEBUG_OPT='--debug'
        ;;
        -h|--help)
        print_usage
        exit 0
        ;;
        pycodestyle|pylint|pylintE|doc|unit|cli)
        SUBTESTS="$SUBTESTS $arg"
        ;;
        $cli_tasks)
        SUBCLI="$SUBCLI $arg"
        ;;
        *)
        print_usage
        exit 2
        ;;
    esac
done

if [[ -n "$SUBTESTS" ]]; then
    # Custom selection of tests.
    TESTS="$SUBTESTS"
else
    # Default tests.
    TESTS="pycodestyle pylintE doc unit cli"
fi

# If cli sub test is not specified by user, do all cli tests.
# Otherwise set CLISUBTEST to the sub test to run.
CLISUBTEST=$cli_tasks
STRIPPED_TEST="$(echo -e "${TESTS}" | tr -d '[:space:]')"
if [[ $STRIPPED_TEST == "cli" ]]; then
    if [[ -n "$SUBCLI" ]]; then
        CLISUBTEST="$SUBCLI"
    fi
fi

# Build a list of python files throughout IMPROVER.
FILES_TO_TEST=''
get_python_files

for TEST_NAME in $TESTS; do
    "improver_test_$TEST_NAME" "$DEBUG_OPT" "$@" "$CLISUBTEST"
done

if [[ -z "$SUBTESTS" ]]; then
    echo_ok "All tests passed."
fi
