#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to calculate optical flow advection velocities with option to
extrapolate."""

import datetime
import iris

from improver.argparser import ArgParser
from improver.nowcasting.optical_flow import AdvectField, OpticalFlow
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf


def generate_output_file_name(cube):
    """
    From an extrapolated forecast cube, generate an IMPROVER-suitable file name
    using the correct lead time.

    Args:
        cube (iris.cube.Cube):
            Cube containing forecast data

    Returns:
        filename (str):
            File basename to which to write
    """

    # TODO write function


def main():
    """Calculate optical flow advection velocities and (optionally)
    extrapolate data."""

    parser = ArgParser(
        description="Calculate optical flow components from input fields "
        "and (optionally) extrapolate to required lead times.")

    parser.add_argument("input_filenames", metavar="INPUT_FILENAMES",
                        nargs="3", type=str, help="Paths to the input radar "
                        "files.  There should be 3 input files at T, T-1 and "
                        "T-2 from which to calculate optical flow velocities.")
    parser.add_argument("--output_dir", metavar="OUTPUT_DIR", type=str,
                        help="Directory to write output files.")

    # OpticalFlow plugin configurable parameters
    parser.add_argument("--ofc_box_size", type=int, default=30, help="Size of "
                        "square 'box' (in grid squares) within which to solve "
                        "the optical flow equations.")   # NOTE this may change to "radius" rather than "diameter"
    parser.add_argument("--smart_smoothing_iterations", type=int, default=100,
                        help="Number of iterations to perform in enforcing "
                        "smoothness constraint for optical flow velocities.")

    # AdvectField options
    parser.add_argument("--extrapolate", action="store_true", default=False,
                        help="Optional flag to advect current data forward to "
                        "specified lead times.")
    parser.add_argument("--max_lead_time", type=int, default=360,
                        help="Maximum lead time required (mins).  Ignored "
                        "unless '--extrapolate' is set.")
    parser.add_argument("--lead_time_interval", type=int, default=15,
                        help="Interval between required lead times (mins). "
                        "Ignored unless '--extrapolate' is set.")

    # read input data
    cube_list = []
    for fname in args.input_filenames:
        cube_list.append(load_cube(fname))
    if len(cube_list) != 3:
        raise ValueError("Expected exactly 3 input files.")

    # order input files by validity time)
    cube_list.sort(key=lambda x: x.coord("time").points[0])

    # calculate optical flow velocities from T-1 to T and T-2 to T-1
    # TODO other defaults will be set up by IMPRO-720
    ofc_plugin = OpticalFlow(boxsize=args.ofc_box_size,
                             iterations=args.smart_smoothing_iterations)
    ucube1, vcube1 = ofc_plugin.process(cube_list[1], cube_list[2])
    ucube2, vcube2 = ofc_plugin.process(cube_list[0], cube_list[1])

    # average optical flow components from both time steps
    time_coord = ucube1.coord("time")

    ucube = iris.cube.CubeList([ucube1, ucube2]).merge_cube()
    umean = ucube.collapsed("time", iris.analysis.MEAN)
    umean.coord("time") = time_coord

    vcube = iris.cube.CubeList([vcube1, vcube2]).merge_cube()
    vmean = vcube.collapsed("time", iris.analysis.MEAN)
    vmean.coord("time") = time_coord

    # save mean optical flow components to netcdf file(s)




    # advect latest input data to the required lead times
    if args.extrapolate:

        advection_plugin = AdvectField(umean, vmean)

        # generate list of lead times (in minutes)
        lead_times = np.arange(args.lead_time_interval, args.max_lead_time+1,
                               args.lead_time_interval)

        for lead_time in lead_times:
            timestep = datetime.timedelta(seconds=60*lead_time)
            forecast_cube = advection_plugin.process(cube_list[2], timestep)

            # generate a suitable output file name
    

            # save to output file path



if __name__ == "__main__":
    main()
