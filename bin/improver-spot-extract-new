#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to run spotdata extraction."""

import numpy as np

from improver.argparser import ArgParser

from improver.spotdata_new.apply_lapse_rate import SpotLapseRateAdjust
from improver.spotdata_new.spot_extraction import SpotExtraction
from improver.spotdata_new.neighbour_finding import NeighbourSelection
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf


def main():
    """Load in arguments and start spotdata extraction process."""
    parser = ArgParser(
        description="Extract diagnostic data from gridded fields for spot data"
        " sites. It is possible to apply a temperature lapse rate adjustment"
        " to temperature data that helps to account for differences between"
        " the spot sites real altitude and that of the grid point from which"
        " the temperature data is extracted.")

    # Input and output files required.
    parser.add_argument("neighbour_filepath", metavar="NEIGHBOUR_FILEPATH",
                        help="Path to a NetCDF file of spot-data neighbours. "
                        "This file also contains the spot site information.")
    parser.add_argument("diagnostic_filepath", metavar="DIAGNOSTIC_FILEPATH",
                        help="Path to a NetCDF file containing the diagnostic "
                             "data to be extracted.")
    parser.add_argument("output_filepath", metavar="OUTPUT_FILEPATH",
                        help="The output path for the resulting NetCDF")

    method_group = parser.add_argument_group("Neighbour finding method")
    method_group.add_argument(
        "--land_constraint", default=False, action='store_true',
        help="If set the neighbour cube will be interogated for grid point"
        " neighbours that were identified using a land constraint. This means"
        " that the grid points should be land points except for sites where"
        " none was found within the search radius when the neighbour cube was"
        " created. May be used with minimum_dz.")
    method_group.add_argument(
        "--minimum_dz", default=False, action='store_true',
        help="If set the neighbour cube will be interogated for grid point"
        " neighbours that were identified using a minimum height difference"
        " constraint. These are grid points that were found to be the closest"
        " in altitude to the spot site within the search radius defined when"
        " the neighbour cube was created. May be used with land_constraint.")

    lapse_group = parser.add_argument_group(
        "Temperature lapse rate adjustment")
    lapse_group.add_argument(
        "--temperature_lapse_rate_filepath",
        help="Filepath to a NetCDF file containing temperature lapse rates. "
        "If this cube is provided, and a screen temperature cube is being "
        "processed, the lapse rates will be used to adjust the temperatures "
        "to better represent each spot site's altitude.")

    meta_group = parser.add_argument_group("Metadata")
    meta_group.add_argument(
        "--grid_metadata_identifier", default="mosg",
        help="A string to identify attributes from the input netCDF files that"
        " should be compared to ensure that the data is compatible. Spot"
        " data works using grid indices, so it is important that the grids"
        " are matching or the data extracted may not match the location of the"
        " spot data sites.")

    args = parser.parse_args()
    neighbour_cube = load_cube(args.neighbour_filepath)
    diagnostic_cube = load_cube(args.diagnostic_filepath)

    neighbour_selection_method = NeighbourSelection(
        land_constraint=args.land_constraint,
        minimum_dz=args.minimum_dz).neighbour_finding_method_name()

    plugin = SpotExtraction(
        neighbour_selection_method=neighbour_selection_method,
        grid_metadata_identifier=args.grid_metadata_identifier)
    result = plugin.process(neighbour_cube, diagnostic_cube)

    # Check whether the diagnostic is screen temperature and a lapse rate cube
    # has been provided.
    screen_temperature = (
        diagnostic_cube.name() == "air_temperature" and
        np.isclose(diagnostic_cube.coord("height").points, 1.5) and
        args.temperature_lapse_rate_filepath)

    if screen_temperature:
        lapse_rate_cube = load_cube(args.temperature_lapse_rate_filepath)
        plugin = SpotLapseRateAdjust(
            args.grid_metadata_identifier,
            neighbour_selection_method=neighbour_selection_method)
        result = plugin.process(result, neighbour_cube, lapse_rate_cube)

    # Save the spot data cube
    save_netcdf(result, args.output_filepath)


if __name__ == "__main__":
    main()
