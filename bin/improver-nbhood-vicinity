#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to run occurrence of a phenomenon within a vicinity
neighbourhood processing."""

from improver.argparser import ArgParser
from improver.nbhood.vicinity import ProbabilityOfOccurrence
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf


def main():
    """
    Load in arguments required for the plugin ProbabilityOfOccurence
    This plugin identify the probability of having a phenomenon occur within a
    vicinity.
    The steps for this are as follows :
        1.    Calculate the occurrence of a phenomenon within
              a defined vicinity.
        2.    If the dataset contains a realization dimension coordinate,
               find the mean.
        3.    Compute neighbourhood processing. (Only square neighourhood
              processing is currently supported).
    """
    parser = ArgParser(
        description='Calculate the probability of having a phenomenon occur '
                    'within the vicinity of a point via '
                    'the ProbabilityOfOccurence plugin '
                    'The input file contains a single diagnostic to which '
                    'this process is applied.')
    parser.add_argument('--neighbourhood_shape', metavar='NEIGHBOURHOOD_SHAPE',
                        choices=["square"], default="square",
                        help='The shape of the neighbourhood to apply in '
                             'neighbourhood processing. Only a "square" '
                             'neighbourhood shape is applicable for '
                             'calculating the probability within a '
                             'vicinity.')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--radius', metavar='RADIUS', type=float,
                       help='The radius (in m) for neighbourhood processing.')
    group.add_argument('--radii-by-lead-time',
                       metavar=('RADII_BY_LEAD_TIME', 'LEAD_TIME_IN_HOURS'),
                       nargs=2,
                       help='The radii for neighbourhood processing '
                       'and the associated lead times at which the radii are '
                       'valid. The radii are in metres whilst the lead time '
                       'has units of hours. The radii and lead times are '
                       'expected as individual comma-separated lists with '
                       'the list of radii given first followed by a list of '
                       'lead times to indicate at what lead time each radii '
                       'should be used. For example: 10000,12000,14000 1,2,3 '
                       'where a lead time of 1 hour uses a radius of 10000m, '
                       'a lead time of 2 hours uses a radius of 12000m, etc.')
    parser.add_argument('--ens_factor', metavar='ENS_FACTOR', type=float,
                        default=1.0,
                        help='The factor with which to adjust the '
                        'neighbourhood size for more than one '
                        'ensemble member. If ens_factor = 1.0 this '
                        'essentially conserves ensemble members if '
                        'every grid square is considered to be the '
                        'equivalent of an ensemble member.'
                        'Optional, defaults to 1.0.')
    parser.add_argument('--weighted_mode', action='store_true', default=False,
                        help='For neighbourhood processing using a circular '
                             'kernel, setting the weighted_mode indicates the '
                             'weighting decreases with radius. '
                             'If weighted_mode is not set, a constant '
                             'weighting is assumed. Currently this '
                             'keyword does nothing as only a square '
                             'kernel is applicable.')
    parser.add_argument('vicinity_distance', metavar='VICINITY_DISTANCE',
                        type=float,
                        help='Distance in metres used to define the vicinity '
                             'within which to search for an occurrence.')
    parser.add_argument('input_filepath', metavar='INPUT_FILE',
                        help='A path to an input NetCDF file to be processed.')
    parser.add_argument('output_filepath', metavar='OUTPUT_FILE',
                        help='The output path for the processed NetCDF.')

    args = parser.parse_args()

    cube = load_cube(args.input_filepath)
    if args.radius:
        radius_or_radii = args.radius
        lead_times = None
    elif args.radii_by_lead_time:
        radius_or_radii = args.radii_by_lead_time[0].split(",")
        lead_times = args.radii_by_lead_time[1].split(",")

    result = (
        ProbabilityOfOccurrence(
            args.vicinity_distance,
            args.neighbourhood_shape, radius_or_radii,
            lead_times=lead_times, ens_factor=args.ens_factor,
            weighted_mode=args.weighted_mode
            ).process(cube))

    save_netcdf(result, args.output_filepath)


if __name__ == "__main__":
    main()
