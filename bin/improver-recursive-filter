#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Module to apply a recursive filter to neighbourhooded data."""

import argparse
import iris

from improver.nbhood.recursive_filter import RecursiveFilter


def main():
    """Load in arguments and get going."""
    parser = argparse.ArgumentParser(
        description="Run a recursive filter to convert a square neighbourhood "
                    "into a Gaussian-like kernel or smooth over short "
                    "distances. "
                    "The filter uses an alpha parameter (0>=alpha<1) to "
                    "control what proportion of the probability is passed "
                    "onto the next grid-square in the x and y directions. "
                    "The alpha parameter can be set on a grid-square "
                    "by grid-square basis (using an array of alpha parameters "
                    "of the same dimensionality as the domain). Alternatively "
                    "a single alpha value can be set for each of the x and y "
                    "directions. ")
    parser.add_argument("input_filepath", metavar="INPUT_FILE",
                        help="A path to an input NetCDF file to be processed")
    parser.add_argument("output_filepath", metavar="OUTPUT_FILE",
                        help="The output path for the processed NetCDF")
    parser.add_argument("--input_filepath_alphas_x", metavar="ALPHAS_X",
                        help="A path to a NetCDF file describing the alpha "
                             "factors to be used for smoothing in the x "
                             "direction")
    parser.add_argument("--input_filepath_alphas_y", metavar="ALPHAS_Y",
                        help="A path to a NetCDF file describing the alpha "
                             "factors to be used for smoothing in the y "
                             "direction")
    parser.add_argument("--alpha_x", metavar="ALPHA_X",
                        default=None, type=float,
                        help="A single alpha factor (0>=alpha_x<1) to be "
                             "applied to every grid square in the x "
                             "direction.")
    parser.add_argument("--alpha_y", metavar="ALPHA_Y",
                        default=None, type=float,
                        help="A single alpha factor (0>=alpha_y<1) to be "
                             "applied to every grid square in the y "
                             "direction.")
    parser.add_argument("--iterations", metavar="ITERATIONS",
                        default=1, type=int,
                        help="Number of cycles over which to apply the filter")
    parser.add_argument('--input_mask_filepath', metavar='INPUT_MASK_FILE',
                        help='A path to an input mask NetCDF file to be '
                        'used to mask the input file.')
    parser.add_argument("--re_mask", action='store_true', default=False,
                        help="Re-apply mask to recursively filtered output.")

    args = parser.parse_args()

    cube = iris.load_cube(args.input_filepath)
    if args.input_mask_filepath:
        mask_cube = iris.load_cube(args.input_mask_filepath)
    else:
        mask_cube = None

    alphas_x_cube = None
    alphas_y_cube = None
    if args.input_filepath_alphas_x is not None:
        alphas_x_cube = iris.load_cube(args.input_filepath_alphas_x)
    if args.input_filepath_alphas_y is not None:
        alphas_y_cube = iris.load_cube(args.input_filepath_alphas_y)

    result = RecursiveFilter(
        alpha_x=args.alpha_x, alpha_y=args.alpha_y,
        iterations=args.iterations, re_mask=args.re_mask).process(
            cube, alphas_x=alphas_x_cube, alphas_y=alphas_y_cube,
            mask_cube=mask_cube)

    iris.save(result, args.output_filepath, unlimited_dimensions=[])


if __name__ == "__main__":
    main()
