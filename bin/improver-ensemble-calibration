#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to run ensemble calibration."""

from improver.argparser import ArgParser

import iris

from improver.ensemble_calibration.ensemble_calibration import (
    EnsembleCalibration)
from improver.ensemble_copula_coupling.ensemble_copula_coupling import (
    GeneratePercentilesFromMeanAndVariance, EnsembleReordering)
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf


def main():
    """Load in arguments for ensemble calibration. 3 sources of input data
       must be provided: current forecast (to be calibrated), historical
       forecasts and historical truth data (to use in calibration). Output from
       EnsembleCalibration plugin can be written to file if required.

       The mean and variance calculated by this plugin are passed to
       GeneratePercentilesFromMeanAndVariance and EnsembleReordering plugins
       to regenerate members.
    """
    parser = ArgParser(
        description='Apply the requested ensemble calibration method using '
        'historical forecast and "truth" data. Then apply ensemble '
        'copula coupling to regenerate ensemble members from output.')
    # Arguments for EnsembleCalibration
    parser.add_argument('calibration_method',
                        metavar='ENSEMBLE_CALIBRATION_METHOD',
                        choices=['ensemble model output statistics',
                                 'nonhomogeneous gaussian regression'],
                        help='The calibration method that will be applied. '
                             'Supported methods are: "emos" (ensemble model '
                             'output statistics) and "ngr" (nonhomogeneous '
                             'gaussian regression).')
    parser.add_argument('units', metavar='UNITS_TO_CALIBRATE_IN',
                        help='The unit that calibration should be undertaken '
                             'in. The current forecast, historical forecast '
                             'and truth will be converted as required.')
    parser.add_argument('distribution', metavar='DISTRIBUTION',
                        choices=['gaussian', 'truncated gaussian'],
                        help='The distribution that will be used for '
                             'calibration. This will be dependent upon the '
                             'input phenomenon. This has to be supported by '
                             'the minimisation functions in '
                             'ContinuousRankedProbabilityScoreMinimisers.')
    # Filepaths for current, historic and truth data.
    parser.add_argument('input_filepath', metavar='INPUT_FILE',
                        help='A path to an input NetCDF file containing the '
                             'current forecast to be processed.')
    parser.add_argument('historic_filepath', metavar='HISTORIC_DATA_FILE',
                        help='A path to an input NetCDF file containing the '
                             'historic forecast(s) used for calibration.')
    parser.add_argument('truth_filepath', metavar='TRUTH_DATA_FILE',
                        help='A path to an input NetCDF file containing the '
                             'historic truth analyses used for calibration.')
    parser.add_argument('output_filepath', metavar='OUTPUT_FILE',
                        help='The output path for the processed NetCDF')
    # Optional arguments.
    parser.add_argument('--predictor_of_mean', metavar='CALIBRATE_MEAN_FLAG',
                        choices=['mean', 'members'], default='mean',
                        help='String to specify the input to calculate the '
                             'calibrated mean. Currently the ensemble mean '
                             '("mean") and the ensemble members ("members") '
                             'are supported as the predictors. Default: '
                             '"mean".')
    parser.add_argument('--save_mean_variance', metavar='MEAN_VARIANCE_FILE',
                        default=False,
                        help='Option to save output mean and variance from '
                             'EnsembleCalibration plugin. If used, a path '
                             'to save the output to must be provided.')
    parser.add_argument('--num_members', metavar='NUMBER_OF_MEMBERS',
                        default=None,
                        help='Optional argument to specify the number of '
                             'ensemble members to produce. Default will be '
                             'the number in the raw input file.')
    parser.add_argument('--random_ordering', default=False,
                        action='store_true',
                        help='Option to reorder the post-processed forecasts '
                             'randomly. If not set, the ordering of the raw '
                             'ensemble is used.')
    parser.add_argument('--random_seed', default=None,
                        help='Option to specify a value for the random seed '
                        'for testing purposes, otherwise, the default random '
                        'seed behaviour is utilised. The random seed is used '
                        'in the generation of the random numbers used for '
                        'either the random_ordering option to order the input '
                        'percentiles randomly, rather than use the ordering '
                        'from the raw ensemble, or for splitting tied values '
                        'within the raw ensemble, so that the values from the '
                        'input percentiles can be ordered to match the raw '
                        'ensemble.')
    args = parser.parse_args()

    current_forecast = load_cube(args.input_filepath)
    historic_forecast = load_cube(args.historic_filepath)
    truth = load_cube(args.truth_filepath)
    # Default number of ensemble members is the number in the raw forecast.
    if not args.num_members:
        args.num_members = len(current_forecast.coord('realization').points)

    # Ensemble-Calibration to calculate the mean and variance.
    forecast_predictor_and_variance = EnsembleCalibration(
        args.calibration_method, args.distribution, args.units,
        predictor_of_mean_flag=args.predictor_of_mean).process(
            current_forecast, historic_forecast, truth)
    # If required, save the mean and variance.
    if args.save_mean_variance:
        mean_variance = [x for y in forecast_predictor_and_variance for x in y]
        mean_variance = iris.cube.CubeList(mean_variance)
        save_netcdf(mean_variance, args.save_mean_variance)

    # Ensemble-Copula-Coupling to generate members from mean and variance.
    percentiles = GeneratePercentilesFromMeanAndVariance().process(
        forecast_predictor_and_variance, args.num_members)
    result = EnsembleReordering().process(percentiles, current_forecast,
                                          random_ordering=args.random_ordering,
                                          random_seed=args.random_seed)
    save_netcdf(result, args.output_filepath)


if __name__ == "__main__":
    main()
