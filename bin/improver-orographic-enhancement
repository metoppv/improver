#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to calculate orographic enhancement."""

import datetime
import os
import iris
import numpy as np

from improver.argparser import ArgParser
from improver.wind_calculations.wind_components import ResolveWindComponents
from improver.orographic_enhancement import OrographicEnhancement
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf
from improver.utilities.filename import generate_file_name


def main():
    """Calculate orographic enhancement of precipitation from model pressure,
    temperature, relative humidity and wind input files"""

    parser = ArgParser(description='Calculate orographic enhancement using the'
                       ' ResolveWindComponents() and OrographicEnhancement() '
                       'plugins. Outputs data on the high resolution orography'
                       ' grid and regridded to the coarser resolution of the '
                       'input diagnostic variables.')

    parser.add_argument('temperature_filepath', metavar='TEMPERATURE_FILEPATH',
                        help='Full path to input NetCDF file of temperature on'
                        ' height levels')
    parser.add_argument('humidity_filepath', metavar='HUMIDITY_FILEPATH',
                        help='Full path to input NetCDF file of relative '
                        'humidity on height levels')
    parser.add_argument('pressure_filepath', metavar='PRESSURE_FILEPATH',
                        help='Full path to input NetCDF file of pressure on '
                        'height levels')
    parser.add_argument('windspeed_filepath', metavar='WINDSPEED_FILEPATH',
                        help='Full path to input NetCDF file of wind speed on '
                        'height levels')
    parser.add_argument('winddir_filepath', metavar='WINDDIR_FILEPATH',
                        help='Full path to input NetCDF file of wind direction'
                        ' on height levels')
    parser.add_argument('orography_filepath', metavar='OROGRAPHY_FILEPATH',
                        help='Full path to input NetCDF high resolution '
                        'orography ancillary. This should be on the same or a '
                        'finer resolution grid than the input variables, and '
                        'defines the grid on which the orographic enhancement '
                        'will be calculated.')
    parser.add_argument('output_dir', metavar='OUTPUT_DIR', help='Directory '
                        'to write output orographic enhancement files')
    parser.add_argument('--boundary_height_metres', type=float, default=1000.,
                        help='Model height level to extract variables for '
                        'calculating orographic enhancement, as proxy for '
                        'the boundary layer.')

    args = parser.parse_args()

    # read input variables
    bh = args.boundary_height_metres
    constraint = iris.Constraint(height=lambda h: bh - 0.1 < h < bh + 0.1)

    load_error_msg = 'No data available from {} at height {} m'

    temperature = load_cube(args.temperature_filepath, constraint)
    if temperature is None:
        raise ValueError(load_error_msg.format(args.temperature_filepath, bh))

    humidity = load_cube(args.humidity_filepath, constraint)
    if humidity is None:
        raise ValueError(load_error_msg.format(args.humidity_filepath, bh))

    pressure = load_cube(args.pressure_filepath, constraint)
    if pressure is None:
        raise ValueError(load_error_msg.format(args.pressure_filepath, bh))

    wind_speed = load_cube(args.windspeed_filepath, constraint)
    if wind_speed is None:
        raise ValueError(load_error_msg.format(args.windspeed_filepath, bh))

    wind_dir = load_cube(args.winddir_filepath, constraint)
    if wind_dir is None:
        raise ValueError(load_error_msg.format(args.winddir_filepath, bh))

    # resolve u and v wind components
    uwind, vwind = ResolveWindComponents().process(wind_speed, wind_dir)

    # load 1 km orography
    orography = load_cube(args.orography_filepath)

    # calculate orographic enhancement
    orogenh_high_res, orogenh_standard = OrographicEnhancement().process(
        temperature, humidity, pressure, uwind, vwind, orography)

    # generate file names
    fname_standard = os.path.join(
        args.output_dir, generate_file_name(orogenh_standard))
    fname_high_res = os.path.join(
        args.output_dir, generate_file_name(
            orogenh_high_res,
            parameter="orographic_enhancement_high_resolution"))

    # save output files
    save_netcdf(orogenh_standard, fname_standard)
    save_netcdf(orogenh_high_res, fname_high_res)


if __name__ == "__main__":
    main()
