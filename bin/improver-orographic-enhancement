#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2018 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to calculate orographic enhancement."""

import datetime
import os
import iris
import numpy as np

from improver.argparser import ArgParser
from improver.wind_calculations.wind_components import ResolveWindComponents
from improver.orographic_enhancement import OrographicEnhancement
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf


def main():
    """Calculate orographic enhancement of precipitation from model pressure,
    temperature, relative humidity and wind input files"""

    parser = ArgParser(description="Calculate orographic enhancement.")

    parser.add_argument('--temperature_filepath', help='Full path to input '
                        'NetCDF temperature file')
    parser.add_argument('--humidity_filepath', help='Full path to input '
                        'NetCDF relative humidity file')
    parser.add_argument('--pressure_filepath', help='Full path to input '
                        'NetCDF pressure file')
    parser.add_argument('--windspeed_filepath', help='Full path to input '
                        'NetCDF wind speed file')
    parser.add_argument('--winddir_filepath', help='Full path to input '
                        'NetCDF wind direction file')

    parser.add_argument('--orography_filepath', help='Full path to input '
                        'NetCDF high resolution (1km) orography ancillary')

    parser.add_argument('--output_high_resolution', help='Full path to write '
                        'orographic enhancement file on high resolution grid')
    parser.add_argument('--output_standard_grid', help='Full path to write '
                        'orographic enhancement file on standard grid')

    parser.add_argument('--boundary_height_metres', type=float, default=955.,
                        help='Model height level to extract variables for '
                        'calculating orographic enhancement, as proxy for '
                        'the boundary layer.')

    args = parser.parse_args()

    # read input variables
    bh = args.boundary_height_metres
    constraint = iris.Constraint(height=lambda h: np.isclose(h, bh))

    temperature = load_cube(args.temperature_filepath, constraint)
    humidity = load_cube(args.humidity_filepath, constraint)
    pressure = load_cube(args.pressure_filepath, constraint)
    wind_speed = load_cube(args.windspeed_filepath, constraint)
    wind_dir = load_cube(args.winddir_filepath, constraint)

    # resolve u and v wind components
    uwind, vwind = ResolveWindComponents(wind_speed, wind_dir)

    # load orography
    orography = load_cube(args.orography_filepath)[0]

    # calculate orographic enhancement
    orogenh_high_res, orogenh_standard = OrographicEnhancement().process(
        temperature, humidity, pressure, uwind, vwind, orography)

    # save output files
    save_netcdf(orogenh_high_res, args.output_high_resolution)
    save_netcdf(orogenh_standard, args.output_standard_grid)



if __name__ == "__main__":
    main()
