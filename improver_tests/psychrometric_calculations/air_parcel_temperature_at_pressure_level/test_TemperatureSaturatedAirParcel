# (C) Crown Copyright, Met Office. All rights reserved.
#
# This file is part of 'IMPROVER' and is released under the BSD 3-Clause license.
# See LICENSE in the root of the repository for full licensing details.
"""Tests for the CloudCondensationLevel plugin"""

from typing import Tuple

import numpy as np
import pytest
from iris.coords import AuxCoord
from iris.cube import Cube

from improver.metadata.constants.attributes import MANDATORY_ATTRIBUTES
from improver.psychrometric_calculations.temperature_saturated_air_parcel import (
    TemperatureSaturatedAirParcel,
)

from improver.synthetic_data.set_up_test_cubes import set_up_variable_cube

LOCAL_MANDATORY_ATTRIBUTES = {
    "title": "unit test data",
    "source": "unit test",
    "institution": "somewhere",
}


@pytest.fixture(name="temperature")
def temperature_cube_fixture() -> Cube:
    """Set up a cube of temperature data"""
    data = np.full((2, 2), fill_value=293.0, dtype=np.float32)
    data[0, 1] = 295.0
    temperature_cube = set_up_variable_cube(
        data, name="air_temperature", units="K", attributes=LOCAL_MANDATORY_ATTRIBUTES
    )
    return temperature_cube


@pytest.fixture(name="pressure")
def pressure_cube_fixture() -> Cube:
    """Set up a cube of pressure data"""
    data = np.full((2, 2,), fill_value=100000.0, dtype=np.float32)
    data[0, 0] = 100200.0
    pressure_cube = set_up_variable_cube(
        data,
        name="surface_air_pressure",
        units="Pa",
        attributes=LOCAL_MANDATORY_ATTRIBUTES,
    )
    return pressure_cube


@pytest.fixture(name="RH")
def RH_cube_fixture() -> Cube:
    """Set up a cube of humidity data"""
    data = np.full((2, 2), fill_value=0.9, dtype=np.float32)
    data[1, 1] = 1.0
    rh_cube = set_up_variable_cube(
        data,
        name="relative_humidity",
        units="1",
        attributes=LOCAL_MANDATORY_ATTRIBUTES,
    )
    return rh_cube
    
@pytest.fixture(name="air_parcel")
def air_parcel_cube_fixture() -> Cube:
    """Set up a result cube"""
    data = np.array([[264.5039, 267.72885],[264.61386, 266.57965]], np.float32)
    air_parcel_cube = set_up_variable_cube(
        data,
        name="parcel_temperature_after_saturated_ascent_from_ccl_to_pressure_level",
        units="K",
        attributes=LOCAL_MANDATORY_ATTRIBUTES,
    )
    return air_parcel_cube

def test_basic(
    temperature_cube,
    pressure_cube,
    rh_cube,
    air_parcel_cube,
):
    """Check that for each pair of values, we get the expected result
    and that the metadata are as expected."""
    result = TemperatureSaturatedAirParcel()([temperature_cube, pressure_cube,
        RH_cube])
    metadata_ok(result, air_parcel_cube)
    assert np.isclose(result.data, air_parcel_cube.data, atol=1e-2).all()


#@pytest.mark.parametrize("model_id_attr", ("mosg__model_configuration", None))
#def test_model_id_attr(temperature, pressure, humidity, model_id_attr):
#    """Check that tests pass if model_id_attr is set on inputs and is applied or not"""
#    temperature.attributes["mosg__model_configuration"] = "gl_ens"
#    pressure.attributes["mosg__model_configuration"] = "gl_ens"
#    humidity.attributes["mosg__model_configuration"] = "gl_ens"
#    result = CloudCondensationLevel(model_id_attr=model_id_attr)(
#        [temperature, pressure, humidity]
#    )
#    metadata_ok(result, temperature, model_id_attr=model_id_attr)


#@pytest.mark.parametrize("has_height_coord", (True, False))
#def test_with_height_coord(temperature, pressure, humidity, has_height_coord):
#    """Check that tests pass if a scalar height coord is present on the temperature cube"""
#    if has_height_coord:
#        temperature.add_aux_coord(
#            AuxCoord(
#                np.array([1.65], dtype=np.float32), standard_name="height", units="m"
#            )
#        )
#    result = CloudCondensationLevel()([temperature, pressure, humidity])
#    metadata_ok(result, temperature)
