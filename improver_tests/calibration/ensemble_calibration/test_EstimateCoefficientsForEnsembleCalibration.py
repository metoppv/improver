# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2021 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""
Unit tests for the
`ensemble_calibration.EstimateCoefficientsForEnsembleCalibration`
class.

"""
import datetime
import importlib
import unittest
from functools import partial

import iris
import numpy as np
from iris.tests import IrisTest

from improver.calibration.ensemble_calibration import (
    EstimateCoefficientsForEnsembleCalibration as Plugin,
)
from improver.metadata.utilities import generate_mandatory_attributes
from improver.synthetic_data.set_up_test_cubes import set_up_variable_cube
from improver.utilities.cube_manipulation import enforce_coordinate_ordering
from improver.utilities.warnings_handler import ManageWarnings

from .helper_functions import (
    EnsembleCalibrationAssertions,
    SetupCubes,
    _create_historic_forecasts,
)

try:
    importlib.import_module("statsmodels")
except (ModuleNotFoundError, ImportError):
    STATSMODELS_FOUND = False
else:
    STATSMODELS_FOUND = True


IGNORED_MESSAGES = [
    "Collapsing a non-contiguous coordinate",  # Originating from Iris
    "invalid escape sequence",  # Originating from statsmodels
    "can't resolve package from",  # Originating from statsmodels
    "Minimisation did not result in convergence",  # From calibration code
    "The final iteration resulted in",  # From calibration code
    "Invalid value encountered in",  # From calculating percentage change in
    # calibration code
    "The statsmodels module cannot be imported",
]
WARNING_TYPES = [
    UserWarning,
    DeprecationWarning,
    ImportWarning,
    UserWarning,
    UserWarning,
    RuntimeWarning,
    ImportWarning,
]


class SetupExpectedCoefficients(IrisTest):

    """Expected coefficients generated by EMOS using the test data."""

    def setUp(self):
        """Set up expected coefficients and coefficient names."""
        super().setUp()
        self.coeff_names = ["alpha", "beta", "gamma", "delta"]
        self.expected_coeff_names = [f"emos_coefficient_{s}" for s in self.coeff_names]

        # The expected coefficients for temperature in Kelvin.
        self.expected_mean_predictor_norm = np.array(
            [12.6514, 0.9521, 0.0191, 0.5088], dtype=np.float32
        )
        # The expected coefficients for wind speed in m s^-1.
        self.expected_mean_predictor_truncnorm = np.array(
            [-0.6381, 0.9904, -0.0, 1.1979], dtype=np.float32
        )

        self.expected_realizations_norm_statsmodels = np.array(
            [-0.0637, 0.0546, 0.2236, 0.9718, -0.0001, 0.944], dtype=np.float32
        )
        self.expected_realizations_norm_no_statsmodels = np.array(
            [0.013, 0.2281, 0.5815, 0.7792, 0.0032, 0.2951], dtype=np.float32
        )
        self.expected_realizations_truncnorm_statsmodels = np.array(
            [-0.6989, -0.4923, 0.3968, 0.7732, 0.0001, 1.0787], dtype=np.float32
        )
        self.expected_realizations_truncnorm_no_statsmodels = np.array(
            [-0.6989, 0.4911, 0.3974, 0.7736, -0.0092, 1.078], dtype=np.float32
        )
        self.expected_mean_predictor_each_grid_point = {
            "emos_coefficient_alpha": np.array(
                [
                    [0.0826, -0.0557, -0.9295],
                    [-0.8838, -0.692, -0.7333],
                    [-0.5827, -0.7399, -0.7708],
                ]
            ),
            "emos_coefficient_beta": np.array(
                [[0.9999, 1.0001, 1.0006], [1.0009, 1.0, 1.0], [1.0005, 1.0006, 1.0]]
            ),
            "emos_coefficient_gamma": np.array(
                [[0.0009, 0.001, 0.0011], [0.0013, 0.0, -0.0], [0.0011, -0.0002, -0.0]]
            ),
            "emos_coefficient_delta": np.array(
                [[-0.0, -0.0, 0.0001], [-0.0, 0.0, -0.0], [-0.0, 0.0001, -0.0]]
            ),
        }
        self.expected_mean_predictor_minimise_each_grid_point = {
            "emos_coefficient_alpha": np.array(
                [
                    [0.0037, 0.0018, 0.0008],
                    [0.0084, 0.0031, 0.0051],
                    [0.0031, 0.0076, 0.0062],
                ]
            ),
            "emos_coefficient_beta": np.array(
                [
                    [1.0002, 0.9999, 0.9972],
                    [0.9977, 0.9975, 0.9973],
                    [0.9984, 0.9979, 0.9972],
                ]
            ),
            "emos_coefficient_gamma": np.array(
                [
                    [0.0007, 0.001, 0.0013],
                    [-0.0006, -0.0031, 0.0006],
                    [0.0015, -0.001, 0.004],
                ]
            ),
            "emos_coefficient_delta": np.array(
                [[0.0, 0.0, 0.0], [-0.0012, 0.0001, -0.0024], [-0.0, 0.0, 0.0003]]
            ),
        }
        self.expected_realizations_predictor_minimise_each_grid_point = {
            "emos_coefficient_alpha": np.array(
                [
                    [0.0019, 0.0006, 0.0068],
                    [-0.0005, 0.0006, -0.0007],
                    [0.0055, 0.0035, 0.0056],
                ]
            ),
            "emos_coefficient_beta": np.array(
                [
                    [
                        [0.556, 0.5816, 0.6072],
                        [0.507, 0.5596, 0.5519],
                        [0.5918, 0.617, 0.5477],
                    ],
                    [
                        [0.5584, 0.5818, 0.5585],
                        [0.5751, 0.609, 0.6085],
                        [0.5898, 0.5836, 0.5979],
                    ],
                    [
                        [0.6156, 0.5685, 0.5627],
                        [0.6401, 0.5598, 0.5678],
                        [0.5481, 0.526, 0.5829],
                    ],
                ]
            ),
            "emos_coefficient_gamma": np.array(
                [
                    [0.0017, 0.0027, -0.0023],
                    [0.0007, 0.0017, 0.0048],
                    [-0.0023, 0.0003, -0.0024],
                ]
            ),
            "emos_coefficient_delta": np.array(
                [
                    [-0.0, 0.0, -0.0005],
                    [0.0009, 0.0, 0.0003],
                    [0.0001, -0.0008, 0.0001],
                ],
            ),
        }
        self.expected_mean_predictor_each_site = {
            "emos_coefficient_alpha": np.array([0.993, 0.9932, 1.0016, 0.993]),
            "emos_coefficient_beta": np.array([1.0, 1.0, 1.0, 1.0]),
            "emos_coefficient_gamma": np.array([0.0, 0.0, 0.0, 0.0]),
            "emos_coefficient_delta": np.array([1.1899, 1.1765, 1.1767, 1.1899]),
        }
        self.expected_realizations_each_site_statsmodels = {
            "emos_coefficient_alpha": np.array([0.8126, 0.8126, 0.8126, 0.8126]),
            "emos_coefficient_beta": np.array(
                [[0.8166, 0.8166, 0.8166, 0.8166], [0.5778, 0.5778, 0.5778, 0.5778]]
            ),
            "emos_coefficient_gamma": np.array([0.0005, 0.0005, 0.0005, 0.0005]),
            "emos_coefficient_delta": np.array([0.2673, 0.2673, 0.2673, 0.2673]),
        }
        self.expected_realizations_each_site_no_statsmodels = {
            "emos_coefficient_alpha": np.array([0.0, 0.0, 0.0, 0.0]),
            "emos_coefficient_beta": np.array(
                [[0.7164, 0.7164, 0.7164, 0.7164], [0.7003, 0.7003, 0.7003, 0.7003]]
            ),
            "emos_coefficient_gamma": np.array([0.0002, 0.0002, 0.0002, 0.0002]),
            "emos_coefficient_delta": np.array([0.9799, 0.9799, 0.9799, 0.98]),
        }


class Test__init__(SetupCubes):

    """Test the initialisation of the class."""

    def setUp(self):
        """Set up variables for testing."""
        self.distribution = "norm"
        self.desired_units = "degreesC"

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coeff_names(self):
        """Test that the plugin instance defines the expected
        coefficient names."""
        expected = ["alpha", "beta", "gamma", "delta"]
        plugin = Plugin(self.distribution,)
        self.assertEqual(plugin.coeff_names, expected)

    def test_invalid_distribution(self):
        """Test an error is raised for an invalid distribution"""
        distribution = "biscuits"
        msg = "Given distribution biscuits not available. "
        with self.assertRaisesRegex(ValueError, msg):
            Plugin(distribution)


class Test_create_coefficients_cubelist(SetupCubes, SetupExpectedCoefficients):

    """Test the create_coefficients_cubelist method."""

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def setUp(self):
        """Set up the plugin and cubes for testing."""
        super().setUp()
        self.historic_forecast = self.historic_temperature_forecast_cube.collapsed(
            "realization", iris.analysis.MEAN
        )
        self.historic_forecast_with_realizations = (
            self.historic_temperature_forecast_cube
        )

        self.optimised_coeffs = self.expected_mean_predictor_norm

        self.distribution = "norm"
        self.desired_units = "degreesC"
        self.predictor = "mean"
        self.plugin = Plugin(
            distribution=self.distribution,
            desired_units=self.desired_units,
            predictor=self.predictor,
        )
        self.expected_frt = (
            self.historic_forecast.coord("forecast_reference_time").cell(-1).point
        )
        self.expected_fp = self.historic_forecast.coord("forecast_period")
        self.expected_x_coord_points = np.median(
            self.historic_forecast.coord(axis="x").points
        )
        self.expected_x_coord_bounds = np.array(
            [
                [
                    np.min(self.historic_forecast.coord(axis="x").bounds),
                    np.max(self.historic_forecast.coord(axis="x").bounds),
                ]
            ]
        )
        self.expected_y_coord_points = np.median(
            self.historic_forecast.coord(axis="y").points
        )
        self.expected_y_coord_bounds = np.array(
            [
                [
                    np.min(self.historic_forecast.coord(axis="y").bounds),
                    np.max(self.historic_forecast.coord(axis="y").bounds),
                ]
            ]
        )
        self.attributes = generate_mandatory_attributes([self.historic_forecast])
        self.attributes["diagnostic_standard_name"] = self.historic_forecast.name()
        self.attributes["distribution"] = self.distribution
        self.attributes["title"] = "Ensemble Model Output Statistics coefficients"

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_from_mean(self):
        """Test that the expected coefficient cube is returned when the
        ensemble mean is used as the predictor."""
        result = self.plugin.create_coefficients_cubelist(
            self.optimised_coeffs, self.historic_forecast
        )
        self.assertEqual(len(result), 4)
        for cube in result:
            self.assertEqual(
                cube.coord("forecast_reference_time").cell(0).point, self.expected_frt,
            )
            self.assertEqual(
                cube.coord("forecast_period"), self.expected_fp,
            )
            self.assertArrayAlmostEqual(
                cube.coord(axis="x").points, self.expected_x_coord_points
            )
            self.assertArrayAlmostEqual(
                cube.coord(axis="x").bounds, self.expected_x_coord_bounds
            )
            self.assertArrayAlmostEqual(
                cube.coord(axis="y").points, self.expected_y_coord_points
            )
            self.assertArrayAlmostEqual(
                cube.coord(axis="y").bounds, self.expected_y_coord_bounds
            )
            self.assertDictEqual(cube.attributes, self.attributes)

        self.assertEqual([cube.name() for cube in result], self.expected_coeff_names)

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coordinates_from_mean_period_diagnostic(self):
        """Test that the time coordinates are as expected when the historic
        forecasts are time-bounded diagnostics, e.g. maximum in hour."""

        fp_bounds = [10800, 14400]

        self.historic_forecast.coord("forecast_period").bounds = fp_bounds
        self.expected_fp.bounds = fp_bounds

        result = self.plugin.create_coefficients_cubelist(
            self.optimised_coeffs, self.historic_forecast
        )
        self.assertEqual(len(result), 4)
        for cube in result:
            self.assertEqual(
                cube.coord("forecast_reference_time").cell(0).point, self.expected_frt,
            )
            self.assertEqual(
                cube.coord("forecast_period"), self.expected_fp,
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_exception_for_multi_valued_forecast_period(self):
        """Test that an exception is raised if the forecast_period is multi-
        valued. This is simply to demonstrate that only single valued
        forecast periods are expected."""

        fps = [0, 3600, 7200, 10800, 14400]
        fp_coord = self.historic_forecast.coord("forecast_period").copy(fps)
        self.historic_forecast.remove_coord("forecast_period")
        self.historic_forecast.add_aux_coord(fp_coord, 0)

        msg = "The forecast period must be the same"
        with self.assertRaisesRegex(ValueError, msg):
            self.plugin.create_coefficients_cubelist(
                self.optimised_coeffs, self.historic_forecast
            )

    def test_attributes_for_truncnorm(self):
        """Test that the expected attributes are created for a truncated normal
        distribution."""
        distribution = "truncnorm"
        self.attributes["distribution"] = distribution
        self.attributes["shape_parameters"] = np.array([0, np.inf], dtype=np.float32)

        plugin = Plugin(
            distribution=distribution,
            desired_units=self.desired_units,
            predictor=self.predictor,
        )
        result = plugin.create_coefficients_cubelist(
            self.optimised_coeffs, self.historic_forecast
        )
        for cube in result:
            self.assertDictEqual(cube.attributes, self.attributes)

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_from_realizations(self):
        """Test that the expected coefficient cube is returned when the
        ensemble realizations are used as the predictor."""
        predictor = "realizations"
        optimised_coeffs = [0, 1, 2, 3, 4, 5]

        plugin = Plugin(
            distribution=self.distribution,
            desired_units=self.desired_units,
            predictor=predictor,
        )
        result = plugin.create_coefficients_cubelist(
            optimised_coeffs, self.historic_forecast_with_realizations
        )
        self.assertEqual([cube.name() for cube in result], self.expected_coeff_names)
        self.assertArrayEqual(
            result.extract("emos_coefficient_beta", strict=True)
            .coord("realization")
            .points,
            self.historic_forecast_with_realizations.coord("realization").points,
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_point_by_point_sites(self):
        """Test that the expected coefficient cube, with the expected coefficients
        and metadata, is returned when the ensemble mean is used as the predictor
        when estimating coefficients for each site independently."""
        plugin = Plugin(
            distribution=self.distribution,
            desired_units=self.desired_units,
            predictor=self.predictor,
            point_by_point=True,
        )
        hf_spot_cube = self.historic_forecast_spot_cube.collapsed(
            "realization", iris.analysis.MEAN
        )
        result = plugin.create_coefficients_cubelist(
            self.expected_mean_predictor_each_site.values(), hf_spot_cube
        )

        self.assertEqual(len(result), 4)
        for cube in result:
            self.assertEqual(
                cube.coord("forecast_reference_time").cell(0).point, self.expected_frt,
            )
            self.assertEqual(
                cube.coord("forecast_period"), self.expected_fp,
            )
            self.assertAlmostEqual(
                cube.coord("latitude"), hf_spot_cube.coord("latitude")
            )
            self.assertAlmostEqual(
                cube.coord("longitude"), hf_spot_cube.coord("longitude")
            )
            self.assertAlmostEqual(
                cube.coord("altitude"), hf_spot_cube.coord("altitude")
            )
            self.assertAlmostEqual(cube.coord("wmo_id"), hf_spot_cube.coord("wmo_id"))
            self.assertDictEqual(cube.attributes, self.attributes)

        self.assertEqual([cube.name() for cube in result], self.expected_coeff_names)

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_too_few_coefficients(self):
        """Test that an exception is raised if the number of coefficients
        provided for creating the coefficients cube is not equal to the
        number of coefficient names."""
        distribution = "truncnorm"
        desired_units = "Fahrenheit"
        predictor = "mean"
        optimised_coeffs = [1, 2, 3]
        plugin = Plugin(
            distribution=distribution, desired_units=desired_units, predictor=predictor,
        )
        msg = "The number of coefficients in"
        with self.assertRaisesRegex(ValueError, msg):
            plugin.create_coefficients_cubelist(
                optimised_coeffs, self.historic_forecast
            )


def _create_multi_date_cube(data):
    """Create a cube with a time dimension coordinate.

    Args:
        data (numpy.ndarray):
            Array that will be repeated for each date.

    Returns:
        iris.cube.Cube:
            Cube containing a time dimension coordinate.
    """
    cubes = iris.cube.CubeList()
    for day in range(1, 3):
        cubes.append(
            set_up_variable_cube(
                data,
                time=datetime.datetime(2017, 11, day, 4, 0),
                frt=datetime.datetime(2017, 11, day, 0, 0),
                units="Kelvin",
                realizations=[0, 1, 2],
            )
        )
    return cubes.merge_cube()


class Test_compute_initial_guess(IrisTest):

    """Test the compute_initial_guess method."""

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def setUp(self):
        """
        Use temperature cube to test with. Also set up versions with a masked
        halo surrounding the original data.
        Set up expected results for different situations.
        """
        self.distribution = "norm"
        self.desired_units = "degreesC"
        self.predictor = "mean"
        self.no_of_realizations = 3
        data = np.array(
            [
                [[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]],
                [[1.0, 2.0, 3], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]],
                [[2.0, 3.0, 4.0], [5.0, 6.0, 7.0], [8.0, 9.0, 10.0]],
            ]
        )
        data = data + 273.15
        data = data.astype(np.float32)
        cube = _create_multi_date_cube(data)

        self.historic_forecast_predictor_mean = cube.collapsed(
            "realization", iris.analysis.MEAN
        )
        self.historic_forecast_predictor_realizations = cube.copy()
        self.truth = cube.collapsed("realization", iris.analysis.MAX)
        # Set up a version of the same cube but with a masked halo surrounding
        # the original data.
        data = np.array(
            [
                [
                    [np.nan, np.nan, np.nan, np.nan, np.nan],
                    [np.nan, 0.0, 1.0, 2.0, np.nan],
                    [np.nan, 3.0, 4.0, 5.0, np.nan],
                    [np.nan, 6.0, 7.0, 8.0, np.nan],
                    [np.nan, np.nan, np.nan, np.nan, np.nan],
                ],
                [
                    [np.nan, np.nan, np.nan, np.nan, np.nan],
                    [np.nan, 1.0, 2.0, 3, np.nan],
                    [np.nan, 4.0, 5.0, 6.0, np.nan],
                    [np.nan, 7.0, 8.0, 9.0, np.nan],
                    [np.nan, np.nan, np.nan, np.nan, np.nan],
                ],
                [
                    [np.nan, np.nan, np.nan, np.nan, np.nan],
                    [np.nan, 2.0, 3.0, 4.0, np.nan],
                    [np.nan, 5.0, 6.0, 7.0, np.nan],
                    [np.nan, 8.0, 9.0, 10.0, np.nan],
                    [np.nan, np.nan, np.nan, np.nan, np.nan],
                ],
            ]
        )
        data = data + 273.15
        data = data.astype(np.float32)
        data = np.ma.masked_invalid(data)
        cube = _create_multi_date_cube(data)

        # Note that when numpy collapses masked arrays it modifies the data
        # type so we convert it back to float32.
        self.historic_forecast_predictor_mean_masked_halo = cube.collapsed(
            "realization", iris.analysis.MEAN
        )
        self.historic_forecast_predictor_mean_masked_halo.data = self.historic_forecast_predictor_mean_masked_halo.data.astype(
            np.float32
        )
        self.historic_forecast_predictor_realizations_masked_halo = cube.copy()
        self.truth_masked_halo = cube.collapsed("realization", iris.analysis.MAX)
        self.truth_masked_halo.data = self.truth_masked_halo.data.astype(np.float32)

        # Set up expected results:
        # Set up results for the case where the
        # use_default_initial_guess is True
        self.expected_mean_predictor_default_initial_guess = np.array(
            [0, 1, 0, 1], dtype=np.float32
        )
        self.expected_realizations_predictor_default_initial_guess = np.array(
            [
                0,
                np.sqrt(1.0 / self.no_of_realizations),
                np.sqrt(1.0 / self.no_of_realizations),
                np.sqrt(1.0 / self.no_of_realizations),
                0,
                1,
            ],
            dtype=np.float32,
        )
        # Set up results for the case where the
        # use_default_initial_guess is False
        self.expected_mean_predictor_compute_initial_guess = np.array(
            [1.0, 1.0, 0.0, 1.0], dtype=np.float32
        )
        self.expected_realizations_predictor_compute_initial_guess = np.array(
            [0.333333, 0.0, 0.333333, 0.666667, 0.0, 1.0], dtype=np.float32
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_basic_mean_predictor(self):
        """
        Test that the plugin returns the expected values for the initial guess
        for the calibration coefficients, when the ensemble mean is used
        as the predictor. As coefficients are not estimated using a
        linear model, the default values for the initial guess are used.
        """
        plugin = Plugin(
            self.distribution,
            use_default_initial_guess=True,
            desired_units=self.desired_units,
        )
        result = plugin.compute_initial_guess(
            self.truth.data,
            self.historic_forecast_predictor_mean.data,
            self.predictor,
            None,
        )
        self.assertIsInstance(result, np.ndarray)
        self.assertArrayAlmostEqual(
            result, self.expected_mean_predictor_default_initial_guess
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_basic_realizations_predictor(self):
        """
        Test that the plugin returns the expected values for the initial guess
        for the calibration coefficients, when the individual ensemble
        realizations are used as predictors. As coefficients are not estimated
        using a linear model, the default values for the initial guess
        are used.
        """
        predictor = "realizations"

        plugin = Plugin(
            self.distribution,
            use_default_initial_guess=True,
            desired_units=self.desired_units,
        )
        result = plugin.compute_initial_guess(
            self.truth.data,
            self.historic_forecast_predictor_realizations.data,
            predictor,
            self.no_of_realizations,
        )
        self.assertIsInstance(result, np.ndarray)
        self.assertArrayAlmostEqual(
            result, self.expected_realizations_predictor_default_initial_guess
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_mean_predictor_estimate_coefficients(self):
        """
        Test that the plugin returns the expected values for the initial guess
        for the calibration coefficients, when the ensemble mean is used
        as the predictor. The coefficients are estimated using a linear model,
        where there is an offset of one between the truth and the forecast
        during the training period. Therefore, in this case the result of the
        linear regression is a gradient of 1 and an intercept of 1.
        """

        plugin = Plugin(
            self.distribution,
            use_default_initial_guess=False,
            desired_units=self.desired_units,
        )
        result = plugin.compute_initial_guess(
            self.truth.data,
            self.historic_forecast_predictor_mean.data,
            self.predictor,
            None,
        )

        self.assertArrayAlmostEqual(
            self.expected_mean_predictor_compute_initial_guess, result
        )

    @unittest.skipIf(STATSMODELS_FOUND is False, "statsmodels module not available.")
    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_realizations_predictor_estimate_coefficients(self):
        """
        Test that the plugin returns the expected values for the initial guess
        for the calibration coefficients, when the ensemble mean is used
        as the predictor. The coefficients are estimated using a linear model.
        In this case, the result of the linear regression is for an intercept
        of 0.333333 with different weights for the realizations because
        some of the realizations are closer to the truth, in this instance.
        """
        predictor = "realizations"

        forecast_predictor = self.historic_forecast_predictor_realizations.copy()
        enforce_coordinate_ordering(forecast_predictor, "realization")
        plugin = Plugin(
            self.distribution,
            use_default_initial_guess=False,
            desired_units=self.desired_units,
        )
        result = plugin.compute_initial_guess(
            self.truth.data,
            forecast_predictor.data,
            predictor,
            self.no_of_realizations,
        )
        self.assertArrayAlmostEqual(
            self.expected_realizations_predictor_compute_initial_guess, result
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_mean_predictor_estimate_coefficients_masked_halo(self):
        """
        Test that the plugin returns the expected values for the initial guess
        for the calibration coefficients, when the ensemble mean is used
        as the predictor. The coefficients are estimated using a linear model,
        where there is an offset of one between the truth and the forecast
        during the training period. Therefore, in this case the result of the
        linear regression is a gradient of 1 and an intercept of 1. In this
        case the original data has been surrounded by a halo of masked nans,
        which gives the same coefficients as the original data.
        """
        plugin = Plugin(
            self.distribution,
            use_default_initial_guess=False,
            desired_units=self.desired_units,
        )
        result = plugin.compute_initial_guess(
            self.truth_masked_halo.data,
            self.historic_forecast_predictor_mean_masked_halo.data,
            self.predictor,
            None,
        )
        self.assertArrayAlmostEqual(
            self.expected_mean_predictor_compute_initial_guess, result
        )

    @unittest.skipIf(STATSMODELS_FOUND is False, "statsmodels module not available.")
    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_realizations_predictor_estimate_coefficients_masked_halo(self):
        """
        Test that the plugin returns the expected values for the initial guess
        for the calibration coefficients, when the ensemble mean is used
        as the predictor. The coefficients are estimated using a linear model.
        In this case, the result of the linear regression is for an intercept
        of 0.333333 with different weights for the realizations because
        some of the realizations are closer to the truth, in this instance. In
        this case the original data has been surrounded by a halo of masked
        nans, which gives the same coefficients as the original data.
        """
        predictor = "realizations"

        forecast_predictor = (
            self.historic_forecast_predictor_realizations_masked_halo.copy()
        )
        enforce_coordinate_ordering(forecast_predictor, "realization")
        plugin = Plugin(
            self.distribution,
            use_default_initial_guess=False,
            desired_units=self.desired_units,
        )
        result = plugin.compute_initial_guess(
            self.truth_masked_halo.data,
            forecast_predictor.data,
            predictor,
            self.no_of_realizations,
        )
        self.assertArrayAlmostEqual(
            self.expected_realizations_predictor_compute_initial_guess, result
        )


class Test_mask_cube(SetupCubes):
    """Test the mask_cube method"""

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def setUp(self):
        """Set up additional cube for land-sea mask."""
        super().setUp()
        mask_data = np.array([[0, 1, 0], [0, 1, 1], [1, 1, 0]], dtype=np.int32)
        self.mask_cube = set_up_variable_cube(
            mask_data, name="land_binary_mask", units="1"
        )
        self.plugin = Plugin("norm")
        # Copy a few slices of the temperature truth cube to test on.
        self.cube3D = self.temperature_truth_cube[0:2, ...].copy()

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_basic(self):
        """Test that a simple cube is masked in the correct way."""
        expected_result = np.array(
            [
                [
                    [np.nan, 273.15, np.nan],
                    [np.nan, 275.75, 276.55],
                    [278.05, 278.35, np.nan],
                ],
                [
                    [np.nan, 273.35, np.nan],
                    [np.nan, 275.95, 276.75],
                    [278.25, 278.55002, np.nan],
                ],
            ],
            dtype=np.float32,
        )
        expected_result = np.ma.masked_invalid(expected_result)
        self.plugin.mask_cube(self.cube3D, self.mask_cube)
        self.assertArrayAlmostEqual(expected_result.data, self.cube3D.data.data)
        self.assertArrayEqual(
            np.ma.getmask(expected_result), np.ma.getmask(self.cube3D.data)
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_basic_2D_input_cube(self):
        """Test that a simple 2D cube is masked in the correct way."""
        cube2D = self.cube3D[0].copy()
        expected_result = np.array(
            [
                [np.nan, 273.15, np.nan],
                [np.nan, 275.75, 276.55],
                [278.05, 278.35, np.nan],
            ],
            dtype=np.float32,
        )
        expected_result = np.ma.masked_invalid(expected_result)
        self.plugin.mask_cube(cube2D, self.mask_cube)
        self.assertArrayAlmostEqual(expected_result.data, cube2D.data.data)
        self.assertArrayEqual(
            np.ma.getmask(expected_result), np.ma.getmask(cube2D.data)
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_fail_mismatched_arrays(self):
        """Test that an error is raised when input have incompatible shapes."""
        cube_mismatched = self.cube3D[..., 0].copy()
        msg = "Cube and landsea_mask shapes are not compatible."
        with self.assertRaisesRegex(IndexError, msg):
            self.plugin.mask_cube(cube_mismatched, self.mask_cube)

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_fail_transposed_input(self):
        """Test that an error is raised when the input cube is transposed"""
        self.cube3D.transpose((2, 0, 1))
        msg = "Cube and landsea_mask shapes are not compatible."
        with self.assertRaisesRegex(IndexError, msg):
            self.plugin.mask_cube(self.cube3D, self.mask_cube)


class Test_process(
    SetupCubes, EnsembleCalibrationAssertions, SetupExpectedCoefficients
):

    """Test the process method"""

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def setUp(self):
        """Set up multiple cubes for testing."""
        super().setUp()
        self.distribution = "norm"

        landsea_data = np.array(
            [
                [0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0],
                [0, 1, 1, 1, 0],
                [0, 1, 1, 1, 0],
                [0, 0, 0, 0, 0],
            ],
            dtype=np.int32,
        )
        self.landsea_cube = set_up_variable_cube(
            landsea_data, name="land_binary_mask", units="1"
        )
        self.plugin = partial(Plugin, tolerance=0.0001)

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_basic(self):
        """Ensure that the optimised_coefficients are returned as a cube,
        with the expected number of coefficients."""
        plugin = self.plugin(self.distribution)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )
        self.assertIsInstance(result, iris.cube.CubeList)
        self.assertEqual(len(result), len(self.coeff_names))

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficient_values_for_norm_distribution(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a normal distribution. In this case,
        a linear least-squares regression is used to construct the initial
        guess."""
        plugin = self.plugin(self.distribution)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), self.expected_mean_predictor_norm,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficient_values_for_norm_distribution_landsea_mask(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a normal distribution. In this case,
        a linear least-squares regression is used to construct the initial
        guess. The original data is surrounded by a halo that is masked
        out by the landsea_mask, giving the same results as the original data.
        """
        plugin = self.plugin(self.distribution)
        result = plugin.process(
            self.historic_temperature_forecast_cube_halo,
            self.temperature_truth_cube_halo,
            landsea_mask=self.landsea_cube,
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), self.expected_mean_predictor_norm,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficient_values_for_norm_distribution_mismatching_inputs(self):
        """Test that the values for the optimised coefficients match the
        expected values, and the coefficient names also match
        expected values for a normal distribution for when the historic
        forecasts and truths input having some mismatches in validity time.
        """
        expected = [12.6627, 0.9521, 0.0032, 0.5102]
        partial_historic_forecasts = (
            self.historic_forecasts[:2] + self.historic_forecasts[3:]
        ).merge_cube()
        partial_truth = self.truth[1:].merge_cube()
        plugin = self.plugin(self.distribution)
        result = plugin.process(partial_historic_forecasts, partial_truth)

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), expected
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_norm_distribution_default_initial_guess(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a normal distribution, where the
        default values for the initial guess are used, rather than using a
        linear least-squares regression to construct an initial guess.
        Reducing the value for the tolerance would result in the coefficients
        more closely matching the coefficients created when using a linear
        least-squares regression to construct the initial guess."""
        expected = [0.0107, 0.9977, -0.0016, 0.5865]
        plugin = self.plugin(self.distribution, use_default_initial_guess=True)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), expected
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_norm_distribution_nan_initial_guess(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a normal distribution, where a NaN is present in the
        historic forecast cube that forces the default values for the
        initial guess to be used, rather than using a linear least-squares
        regression to construct an initial guess. Reducing the value for the
        tolerance would result in the coefficients more closely matching the
        coefficients created when using a linear least-squares regression to
        construct the initial guess."""
        expected = [0.0107, 0.9977, -0.0016, 0.5866]
        self.historic_temperature_forecast_cube.data[0, 0] = np.nan
        plugin = self.plugin(self.distribution)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), expected
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficient_values_for_norm_distribution_max_iterations(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a normal distribution, when the max_iterations
        argument is specified."""
        max_iterations = 800

        plugin = self.plugin(self.distribution, max_iterations=max_iterations)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), self.expected_mean_predictor_norm,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficient_values_for_truncnorm_distribution(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a truncated normal distribution. In this case,
        a linear least-squares regression is used to construct the initial
        guess."""
        distribution = "truncnorm"

        plugin = self.plugin(distribution)
        result = plugin.process(
            self.historic_wind_speed_forecast_cube, self.wind_speed_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]),
            self.expected_mean_predictor_truncnorm,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )
        for cube in result:
            self.assertArrayEqual(
                cube.attributes["shape_parameters"],
                np.array([0, np.inf], dtype=np.float32),
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficient_values_for_truncnorm_distribution_mask(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a truncated normal distribution. In this case,
        a linear least-squares regression is used to construct the initial
        guess.The original data is surrounded by a halo that is masked
        out by the land-sea mask, giving the same results as the original data.
        """
        distribution = "truncnorm"

        plugin = self.plugin(distribution)
        result = plugin.process(
            self.historic_wind_speed_forecast_cube_halo,
            self.wind_speed_truth_cube_halo,
            landsea_mask=self.landsea_cube,
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]),
            self.expected_mean_predictor_truncnorm,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_truncnorm_default_initial_guess(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a truncated normal distribution, where the
        default values for the initial guess are used, rather than using a
        linear least-squares regression to construct an initial guess.
        Reducing the value for the tolerance would result in the coefficients
        more closely matching the coefficients created when using a linear
        least-squares regression to construct the initial guess."""
        expected = [-0.6381, 0.9904, -0.0, 1.1979]
        distribution = "truncnorm"

        plugin = self.plugin(distribution, use_default_initial_guess=True)
        result = plugin.process(
            self.historic_wind_speed_forecast_cube, self.wind_speed_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), expected
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @unittest.skipIf(STATSMODELS_FOUND is False, "statsmodels module not available.")
    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_norm_realizations_statsmodels(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a normal distribution where the
        realizations are used as the predictor."""
        predictor = "realizations"

        plugin = self.plugin(self.distribution, predictor=predictor)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.concatenate([np.atleast_1d(cube.data) for cube in result]),
            self.expected_realizations_norm_statsmodels,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @unittest.skipIf(STATSMODELS_FOUND is True, "statsmodels module is available.")
    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_norm_realizations_no_statsmodels(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a normal distribution where the
        realizations are used as the predictor.
        """
        predictor = "realizations"

        plugin = self.plugin(self.distribution, predictor=predictor)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )
        self.assertEMOSCoefficientsAlmostEqual(
            np.concatenate([np.atleast_1d(cube.data) for cube in result]),
            self.expected_realizations_norm_no_statsmodels,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @unittest.skipIf(STATSMODELS_FOUND is False, "statsmodels module not available.")
    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_truncnorm_realizations_statsmodels(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a truncated normal distribution where the
        realizations are used as the predictor."""
        distribution = "truncnorm"
        predictor = "realizations"

        plugin = self.plugin(distribution, predictor=predictor)
        result = plugin.process(
            self.historic_wind_speed_forecast_cube, self.wind_speed_truth_cube
        )
        self.assertEMOSCoefficientsAlmostEqual(
            np.concatenate([np.atleast_1d(cube.data) for cube in result]),
            self.expected_realizations_truncnorm_statsmodels,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @unittest.skipIf(STATSMODELS_FOUND is True, "statsmodels module is available.")
    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_coefficients_truncnorm_realizations_no_statsmodels(self):
        """Ensure that the values for the optimised_coefficients match the
        expected values, and the coefficient names also match
        expected values for a truncated normal distribution where the
        realizations are used as the predictor."""
        distribution = "truncnorm"
        predictor = "realizations"

        plugin = self.plugin(distribution, predictor=predictor)
        result = plugin.process(
            self.historic_wind_speed_forecast_cube, self.wind_speed_truth_cube
        )
        self.assertEMOSCoefficientsAlmostEqual(
            np.concatenate([np.atleast_1d(cube.data) for cube in result]),
            self.expected_realizations_truncnorm_no_statsmodels,
        )
        self.assertArrayEqual(
            [cube.name() for cube in result], self.expected_coeff_names
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_point_by_point(self):
        """Test computing coefficients independently for each grid point (initial guess
        and minimising) returns the expected coefficients and associated metadata."""
        plugin = self.plugin(self.distribution, point_by_point=True)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )
        for cube in result:
            self.assertEMOSCoefficientsAlmostEqual(
                cube.data, self.expected_mean_predictor_each_grid_point[cube.name()],
            )
            self.assertIn(cube.name(), self.expected_coeff_names)
            self.assertEqual(
                [c.name() for c in cube.coords(dim_coords=True)],
                ["latitude", "longitude"],
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_point_by_point_with_nans(self):
        """Test computing coefficients independently for each grid point (initial guess
        and minimising) returns the expected coefficients and associated metadata,
        if one grid point has a NaN value."""
        self.historic_temperature_forecast_cube.data[0, 0, 0, 0] = np.nan
        replacements = [0.0037, 1.0002, 0.0007, 0.0]
        for index, key in enumerate(
            self.expected_mean_predictor_each_grid_point.keys()
        ):
            self.expected_mean_predictor_each_grid_point[key][0][0] = replacements[
                index
            ]

        plugin = self.plugin(self.distribution, point_by_point=True)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )
        for cube in result:
            self.assertEMOSCoefficientsAlmostEqual(
                cube.data, self.expected_mean_predictor_each_grid_point[cube.name()],
            )
            self.assertIn(cube.name(), self.expected_coeff_names)
            self.assertEqual(
                [c.name() for c in cube.coords(dim_coords=True)],
                ["latitude", "longitude"],
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_point_by_point_sites(self):
        """Test computing coefficients independently for each site location
        (initial guess and minimising) returns the expected coefficients and
        associated metadata."""
        plugin = self.plugin(self.distribution, point_by_point=True)
        result = plugin.process(self.historic_forecast_spot_cube, self.truth_spot_cube)
        for cube in result:
            self.assertEMOSCoefficientsAlmostEqual(
                cube.data, self.expected_mean_predictor_each_site[cube.name()],
            )
            self.assertIn(cube.name(), self.expected_coeff_names)
            self.assertEqual(
                [c.name() for c in cube.coords(dim_coords=True)], ["spot_index"],
            )

    @unittest.skipIf(STATSMODELS_FOUND is False, "statsmodels module not available.")
    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_point_by_point_sites_realizations_statsmodels(self):
        """Test computing coefficients independently for each site location
        (initial guess and minimising) using realizations as the predictor
        returns the expected coefficients and associated metadata."""
        expected_dim_coords = {
            "emos_coefficient_alpha": ["spot_index"],
            "emos_coefficient_beta": ["realization", "spot_index"],
            "emos_coefficient_gamma": ["spot_index"],
            "emos_coefficient_delta": ["spot_index"],
        }

        plugin = self.plugin(
            self.distribution, predictor="realizations", point_by_point=True
        )
        result = plugin.process(self.historic_forecast_spot_cube, self.truth_spot_cube)
        for cube in result:
            self.assertEMOSCoefficientsAlmostEqual(
                cube.data,
                self.expected_realizations_each_site_statsmodels[cube.name()],
            )
            self.assertIn(cube.name(), self.expected_coeff_names)
            self.assertEqual(
                [c.name() for c in cube.coords(dim_coords=True)],
                expected_dim_coords[cube.name()],
            )

    @unittest.skipIf(STATSMODELS_FOUND is True, "statsmodels module is available.")
    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_point_by_point_sites_realizations_no_statsmodels(self):
        """Test computing coefficients independently for each site location
        (initial guess and minimising) using realizations as the predictor
        returns the expected coefficients and associated metadata."""
        expected_dim_coords = {
            "emos_coefficient_alpha": ["spot_index"],
            "emos_coefficient_beta": ["realization", "spot_index"],
            "emos_coefficient_gamma": ["spot_index"],
            "emos_coefficient_delta": ["spot_index"],
        }

        plugin = self.plugin(
            self.distribution, predictor="realizations", point_by_point=True
        )
        result = plugin.process(self.historic_forecast_spot_cube, self.truth_spot_cube)
        for cube in result:
            self.assertEMOSCoefficientsAlmostEqual(
                cube.data,
                self.expected_realizations_each_site_no_statsmodels[cube.name()],
            )
            self.assertIn(cube.name(), self.expected_coeff_names)
            self.assertEqual(
                [c.name() for c in cube.coords(dim_coords=True)],
                expected_dim_coords[cube.name()],
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_point_by_point_landsea_mask(self):
        """Test that an exception is raised if a land-sea mask is provided
        with the point_by_point argument."""
        plugin = self.plugin(self.distribution, point_by_point=True)
        msg = "The use of a landsea mask"
        with self.assertRaisesRegex(NotImplementedError, msg):
            plugin.process(
                self.historic_temperature_forecast_cube_halo,
                self.temperature_truth_cube_halo,
                landsea_mask=self.landsea_cube,
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_point_by_point_default_initial_guess(self):
        """Test computing coefficients independently for each grid point
        (minimisation only) returns the expected coefficients and associated metadata."""
        plugin = self.plugin(
            self.distribution, point_by_point=True, use_default_initial_guess=True
        )
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )
        for cube in result:
            self.assertEMOSCoefficientsAlmostEqual(
                cube.data,
                self.expected_mean_predictor_minimise_each_grid_point[cube.name()],
            )
            self.assertIn(cube.name(), self.expected_coeff_names)
            self.assertEqual(
                [c.name() for c in cube.coords(dim_coords=True)],
                ["latitude", "longitude"],
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_point_by_point_default_initial_guess_realizations(self):
        """Test computing coefficients independently for each grid point
        (minimisation only) returns the expected coefficients and associated metadata
        when using the realizations as the predictor."""
        expected_dim_coords = {
            "emos_coefficient_alpha": ["latitude", "longitude"],
            "emos_coefficient_beta": ["realization", "latitude", "longitude"],
            "emos_coefficient_gamma": ["latitude", "longitude"],
            "emos_coefficient_delta": ["latitude", "longitude"],
        }
        plugin = self.plugin(
            self.distribution,
            point_by_point=True,
            use_default_initial_guess=True,
            predictor="realizations",
        )
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )
        for cube in result:
            self.assertEMOSCoefficientsAlmostEqual(
                cube.data,
                self.expected_realizations_predictor_minimise_each_grid_point[
                    cube.name()
                ],
            )
            self.assertIn(cube.name(), self.expected_coeff_names)
            self.assertEqual(
                [c.name() for c in cube.coords(dim_coords=True)],
                expected_dim_coords[cube.name()],
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_truth_unit_conversion(self):
        """Ensure the expected optimised coefficients are generated,
        even if the input truth cube has different units."""
        self.temperature_truth_cube.convert_units("Fahrenheit")
        desired_units = "Kelvin"

        plugin = self.plugin(self.distribution, desired_units=desired_units)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), self.expected_mean_predictor_norm,
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_historic_forecast_unit_conversion(self):
        """Ensure the expected optimised coefficients are generated,
        even if the input historic forecast cube has different units."""
        self.historic_temperature_forecast_cube.convert_units("Fahrenheit")
        desired_units = "Kelvin"

        plugin = self.plugin(self.distribution, desired_units=desired_units)
        result = plugin.process(
            self.historic_temperature_forecast_cube, self.temperature_truth_cube
        )

        self.assertEMOSCoefficientsAlmostEqual(
            np.array([cube.data for cube in result]), self.expected_mean_predictor_norm,
        )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_non_matching_units(self):
        """Test that an exception is raised if the historic forecasts and truth
        have non matching units."""
        self.historic_temperature_forecast_cube.convert_units("Fahrenheit")

        plugin = self.plugin(self.distribution)

        msg = "The historic forecast units"
        with self.assertRaisesRegex(ValueError, msg):
            plugin.process(
                self.historic_temperature_forecast_cube, self.temperature_truth_cube
            )

    @ManageWarnings(ignored_messages=IGNORED_MESSAGES, warning_types=WARNING_TYPES)
    def test_missing_cube(self):
        """Test that an exception is raised if either of the  historic
        forecasts or truth were missing."""
        self.historic_temperature_forecast_cube.convert_units("Fahrenheit")

        plugin = self.plugin(self.distribution)

        msg = ".*cubes must be provided"
        with self.assertRaisesRegex(ValueError, msg):
            plugin.process(self.historic_temperature_forecast_cube, None)


if __name__ == "__main__":
    unittest.main()
