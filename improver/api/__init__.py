# (C) Crown copyright, Met Office. All rights reserved.
#
# This file is part of IMPROVER and is released under a BSD 3-Clause license.
# See LICENSE in the root of the repository for full licensing details.
"""
This module contains the plugins for the IMPROVER project.  This aids in discoverability
by making them available to a single flat namespace.  This also protects end-users from
changes in structure to IMPROVER impacting their use of the plugins.
"""
from importlib import import_module


PROCESSING_MODULES = {
    'OccurrenceBetweenThresholds': 'improver.between_thresholds',
    'TriangularWeightedBlendAcrossAdjacentPoints': 'improver.blending.blend_across_adjacent_points',
    'WeightAndBlend': 'improver.blending.calculate_weights_and_blend',
    'SpatiallyVaryingWeightsFromMask': 'improver.blending.spatial_weights',
    'MergeCubesForWeightedBlending': 'improver.blending.weighted_blend',
    'WeightedBlendAcrossWholeDimension': 'improver.blending.weighted_blend',
    'ChooseWeightsLinear': 'improver.blending.weights',
    'ChooseDefaultWeightsLinear': 'improver.blending.weights',
    'ChooseDefaultWeightsNonLinear': 'improver.blending.weights',
    'ChooseDefaultWeightsTriangular': 'improver.blending.weights',
    'ContinuousRankedProbabilityScoreMinimisers': 'improver.calibration.ensemble_calibration',
    'EstimateCoefficientsForEnsembleCalibration': 'improver.calibration.ensemble_calibration',
    'CalibratedForecastDistributionParameters': 'improver.calibration.ensemble_calibration',
    'ApplyEMOS': 'improver.calibration.ensemble_calibration',
    'ConstructReliabilityCalibrationTables': 'improver.calibration.reliability_calibration',
    'AggregateReliabilityCalibrationTables': 'improver.calibration.reliability_calibration',
    'ManipulateReliabilityTable': 'improver.calibration.reliability_calibration',
    'ApplyReliabilityCalibration': 'improver.calibration.reliability_calibration',
    'ApplyRainForestsCalibration': 'improver.calibration.rainforest_calibration',
    'EstimateDzRescaling': 'improver.calibration.dz_rescaling',
    'ApplyDzRescaling': 'improver.calibration.dz_rescaling',
    'CalculateForecastBias': 'improver.calibration.simple_bias_correction',
    'ApplyBiasCorrection': 'improver.calibration.simple_bias_correction',
    'Combine': 'improver.cube_combiner',
    'CubeCombiner': 'improver.cube_combiner',
    'MaxInTimeWindow': 'improver.cube_combiner',
    'RebadgeRealizationsAsPercentiles': 'improver.ensemble_copula_coupling.ensemble_copula_coupling',
    'RebadgePercentilesAsRealizations': 'improver.ensemble_copula_coupling.ensemble_copula_coupling',
    'ResamplePercentiles': 'improver.ensemble_copula_coupling.ensemble_copula_coupling',
    'ConvertProbabilitiesToPercentiles': 'improver.ensemble_copula_coupling.ensemble_copula_coupling',
    'EnsembleReordering': 'improver.ensemble_copula_coupling.ensemble_copula_coupling',
    'CorrectLandSeaMask': 'improver.generate_ancillaries.generate_ancillary',
    'GenerateOrographyBandAncils': 'improver.generate_ancillaries.generate_ancillary',
    'OrographicSmoothingCoefficients': 'improver.generate_ancillaries.generate_orographic_smoothing_coefficients',
    'SaturatedVapourPressureTable': 'improver.generate_ancillaries.generate_svp_table',
    'GenerateSolarTime': 'improver.generate_ancillaries.generate_derived_solar_fields',
    'GenerateClearskySolarRadiation': 'improver.generate_ancillaries.generate_derived_solar_fields',
    'GenerateTopographicZoneWeights': 'improver.generate_ancillaries.generate_topographic_zone_weights',
    'ApplyGriddedLapseRate': 'improver.lapse_rate',
    'LapseRate': 'improver.lapse_rate',
    'Threshold': 'improver.threshold',
    'BaseNeighbourhoodProcessing': 'improver.nbhood.nbhood',
    'MetaNeighbourhood': 'improver.nbhood.nbhood',
    'ApplyNeighbourhoodProcessingWithAMask': 'improver.nbhood.use_nbhood',
    'RecursiveFilter': 'improver.nbhood.recursive_filter',
    'Accumulation': 'improver.nowcasting.accumulation',
    'AdvectField': 'improver.nowcasting.forecasting',
    'CreateExtrapolationForecast': 'improver.nowcasting.forecasting',
    'NowcastLightning': 'improver.nowcasting.lightning',
    'OpticalFlow': 'improver.nowcasting.optical_flow',
    'PystepsExtrapolate': 'improver.nowcasting.pysteps_advection',
    'ExtendRadarMask': 'improver.nowcasting.utilities',
    'FillRadarHoles': 'improver.nowcasting.utilities',
    'ApplyOrographicEnhancement': 'improver.nowcasting.utilities',
    'OrographicEnhancement': 'improver.orographic_enhancement',
    'PercentileConverter': 'improver.percentile',
    'ConvectionRatioFromComponents': 'improver.precipitation_type.convection',
    'ShowerConditionProbability': 'improver.precipitation_type.shower_condition_probability',
    'SnowFraction': 'improver.precipitation_type.snow_fraction',
    'SnowSplitter': 'improver.precipitation_type.snow_splitter',
    'FreezingRain': 'improver.precipitation_type.freezing_rain',
    'HailFraction': 'improver.precipitation_type.hail_fraction',
    'PrecipPhaseProbability': 'improver.psychrometric_calculations.precip_phase_probability',
    'HumidityMixingRatio': 'improver.psychrometric_calculations.psychrometric_calculations',
    'PhaseChangeLevel': 'improver.psychrometric_calculations.psychrometric_calculations',
    'SignificantPhaseMask': 'improver.psychrometric_calculations.significant_phase_mask',
    'HailSize': 'improver.psychrometric_calculations.hail_size',
    'MetaCloudCondensationLevel': 'improver.psychrometric_calculations.cloud_condensation_level',
    'CloudCondensationLevel': 'improver.psychrometric_calculations.cloud_condensation_level',
    'CloudTopTemperature': 'improver.psychrometric_calculations.cloud_top_temperature',
    'WetBulbTemperature': 'improver.psychrometric_calculations.wet_bulb_temperature',
    'WetBulbTemperatureIntegral': 'improver.psychrometric_calculations.wet_bulb_temperature',
    'MetaWetBulbFreezingLevel': 'improver.psychrometric_calculations.wet_bulb_temperature',
    'RegridLandSea': 'improver.regrid.landsea',
    'AdjustLandSeaPoints': 'improver.regrid.landsea',
    'RegridWithLandSeaMask': 'improver.regrid.landsea2',
    'SpotLapseRateAdjust': 'improver.spotdata.apply_lapse_rate',
    'NeighbourSelection': 'improver.spotdata.neighbour_finding',
    'SpotExtraction': 'improver.spotdata.spot_extraction',
    'SpotHeightAdjustment': 'improver.spotdata.height_adjustment',
    'StandardiseMetadata': 'improver.standardise',
    'ExtractSubCube': 'improver.utilities.cube_extraction',
    'ExtractLevel': 'improver.utilities.cube_extraction',
    'MergeCubes': 'improver.utilities.cube_manipulation',
    'InterpolateUsingDifference': 'improver.utilities.interpolation',
    'Integration': 'improver.utilities.mathematical_operations',
    'DayNightMask': 'improver.utilities.solar',
    'DifferenceBetweenAdjacentGridSquares': 'improver.utilities.spatial',
    'GradientBetweenAdjacentGridSquares': 'improver.utilities.spatial',
    'OccurrenceWithinVicinity': 'improver.utilities.spatial',
    'TemporalInterpolation': 'improver.utilities.temporal_interpolation',
    'FieldTexture': 'improver.utilities.textural',
    'GenerateTimeLaggedEnsemble': 'improver.utilities.time_lagging',
    'EnforceConsistentForecasts': 'improver.utilities.forecast_reference_enforcement',
    'CopyAttributes': 'improver.utilities.copy_attributes',
    'LightningFromCapePrecip': 'improver.lightning',
    'LightningMultivariateProbability_USAF2024': 'improver.lightning',
    'ResolveWindComponents': 'improver.wind_calculations.wind_components',
    'WindDirection': 'improver.wind_calculations.wind_direction',
    'FrictionVelocity': 'improver.wind_calculations.wind_downscaling',
    'RoughnessCorrection': 'improver.wind_calculations.wind_downscaling',
    'WindGustDiagnostic': 'improver.wind_calculations.wind_gust_diagnostic',
    'VerticalUpdraught': 'improver.wind_calculations.vertical_updraught',
    'ApplyDecisionTree': 'improver.categorical.decision_tree',
    'ModalCategory': 'improver.categorical.modal_code',
    'ExpectedValue': 'improver.expected_value',
    'VisibilityCombineCloudBase': 'improver.visibility.visibility_combine_cloud_base',
}


def __getattr__(name):
    mod = import_module(PROCESSING_MODULES[name])
    return getattr(mod, name)